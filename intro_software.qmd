---
title: "Software for the course"
bibliography: 
    - ref_julia.bib
csl: ieee-control-systems.csl
format:
    html     
---

Although our course is heavily based on mathematical methods, it is a course designed for (control) engineers, which is to say that our main shared goal is to learn to **solve engineering problems by using the mathematical methods**. And except for the simplest textbook problems, the needed methods are **numerical**, which inevitably means that the course will have a strong **software** component. 

On the other hand, our graduate course is not just a vocational training in using a dedicated software tool, and therefore we are going to **implement** the methods introduced in our course by ourselves, even if at a prototype form. We believe that this is the best way to **learn the potentials and limitations of the methods**, even if ultimately we may want (or be forced) to use use specialized software tools developed by professionals. 

In our course, we are going to use the [Julia](https://julialang.org) programming language for implementation of the methods. A code written in Julia is certainly easily readable even by people programming in Matlab or Python. Whether this choice offers any advantage over the two other languages will be seen in the course. 

Julia is used not only by the teacher(s) in these lecture notes, but also by students for programming the solutions to assigned homework problems (as collected and automatically evaluated through the FEL Brute system).

However, we are very well aware of the popularity of Matlab in the control systems community including our students, and that is why we also enable submission of homework solutions in Matlab, although not through the same Brute system and without the benefit of immediate automatic evaluation. We give instructions elsewhere.
